PARTITION BY
In our last query, we were able to find the running total, average and count of only Instagram’s followers using window functions. But what about the other accounts in our social media table? What if we wanted to compare all of our users?

This is where we can use another feature of window functions: PARTITION BY.

PARTITION BY is a subclause of the OVER clause and divides a query’s result set into parts. It’s very similar to GROUP BY except it does not reduce the number of rows returned.

While using GROUP BY only allows one row to be returned for each group, PARTITION BY allows you to see all of the resultant rows.

-- Example1
SELECT username, 
    SUM(change_in_followers) AS 'total_follower_change'
FROM social_media
GROUP BY username;

-- Example2: If you modify the query to also return the month column, what happens?
SELECT username,month,SUM(change_in_followers) AS 'total_follower_change'
FROM social_media
GROUP BY username, month;

--Example 3: 
SELECT 
    username,
    month,
    change_in_followers,
    SUM(change_in_followers) OVER (
      PARTITION BY username 
      ORDER BY month
    ) 'running_total_followers_change'
FROM
    social_media;


-- Example 4: Utilizing PARTITION BY allowed us to find the total change in followers for each user up to the current month and display it next to the current month.
--Modify the query to have it also return the average change in followers for each month and return this as running_avg_followers_change.

SELECT 
    username,
    month,
    change_in_followers,
    SUM(change_in_followers) OVER (
      PARTITION BY username 
      ORDER BY month
    ) 'running_total_followers_change',
    posts,
    AVG(change_in_followers) OVER (
      PARTITION BY username 
      ORDER BY month
    ) 'running_avg_followers_change'
FROM
    social_media;

    