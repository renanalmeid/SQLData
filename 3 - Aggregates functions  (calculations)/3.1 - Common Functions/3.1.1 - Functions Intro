Introduction
We’ve learned how to write queries to retrieve information from the database. Now, we are going to learn how to perform calculations using SQL.

Calculations performed on multiple rows of a table are called aggregates.

In this lesson, we have given you a table named fake_apps which is made up of fake mobile applications data.

Here is a quick preview of some important aggregates that we will cover in the next five exercises:

COUNT(): count the number of rows
SUM(): the sum of the values in a column
MAX()/MIN(): the largest/smallest value
AVG(): the average of the values in a column
ROUND(): round the values in the column

-- ###### COUNT
-- COUNT() is a function that takes the name of a column as an argument and counts the number of non-empty values in that column.

--Here, we want to count every row, so we pass * as an argument inside the parenthesis. 
SELECT COUNT(*) 
FROM fake_apps 
WHERE price =0;

-- ##### SUM 
--SUM() is a function that takes the name of a column as an argument and returns the sum of all the values in that column.

SELECT SUM(downloads)
FROM fake_apps;

-- ##### Max/Min 
-- The MAX() and MIN() functions return the highest and lowest values in a column, respectively.

SELECT MAX(price)
FROM fake_apps;

-- ##### Average
--SQL uses the AVG() function to quickly calculate the average value of a particular column.

SELECT AVG(price)
FROM fake_apps;

-- ##### ROUND
--Round
--By default, SQL tries to be as precise as possible without rounding. We can make the result table easier to read using the ROUND() function.

--ROUND() function takes two arguments inside the parenthesis:

--a column name
--an integer
--It rounds the values in the column to the number of decimal places specified by the integer.

SELECT name, ROUND(price, 0)
FROM fake_apps;

SELECT ROUND(AVG(price), 2)
FROM fake_apps;

-- ##### Group By I 

--GROUP BY is a clause in SQL that is used with aggregate functions. It is used in collaboration with the SELECT statement to arrange identical data into groups.

--The GROUP BY statement comes after any WHERE statements, but before ORDER BY or LIMIT.

SELECT price, COUNT(*)
FROM fake_apps
GROUP BY price;


SELECT price, COUNT(*)
FROM fake_apps
WHERE downloads > 20000
GROUP BY price;

SELECT category, SUM(downloads)
FROM fake_apps 
GROUP BY category;

-- ##### GROUP By II
--SQL lets us use column reference(s) in our GROUP BY that will make our lives easier.

--1 is the first column selected
--2 is the second column selected
--3 is the third column selected

SELECT category, 
   price,
   AVG(downloads)
FROM fake_apps
GROUP BY category, price;

SELECT category, 
   price,
   AVG(downloads)
FROM fake_apps
GROUP BY 1, 2;

-- ##### Having 
--In addition to being able to group data using GROUP BY, SQL also allows you to filter which groups to include and which to exclude.

-- We can’t use WHERE here because we don’t want to filter the rows; we want to filter groups.

--HAVING is very similar to WHERE. In fact, all types of WHERE clauses you learned about thus far can be used with HAVING.
SELECT price, 
   ROUND(AVG(downloads)),
   COUNT(*)
FROM fake_apps
GROUP BY price;

--It returns the average downloads (rounded) and the number of apps – at each price point.
--However, certain price points don’t have very many apps, so their average downloads are less meaningful.
--Add a HAVING clause to restrict the query to price points that have more than 10 apps.

SELECT price, 
   ROUND(AVG(downloads)),
   COUNT(*)
FROM fake_apps
GROUP BY price
HAVING COUNT(*) > 10;
