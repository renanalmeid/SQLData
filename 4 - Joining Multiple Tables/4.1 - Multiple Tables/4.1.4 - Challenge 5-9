####### Code Challenge 5

 Cross join months and premium_users and select:

user_id from premium_users
purchase_date from premium_users
cancel_date from premium_users
months from months


SELECT premium_users.user_id,
	premium_users.purchase_date,
  premium_users.cancel_date,
  months.months
FROM premium_users
CROSS JOIN months;


####### Code Challenge 6

SELECT premium_users.user_id,
  months.months,
  CASE
    WHEN (
      premium_users.purchase_date <=
             months.months
      )
      AND
      (
        (premium_users.cancel_date >=
                months.months)
        OR
        premium_users.cancel_date IS NULL
      )
    THEN 'active'
    ELSE 'not_active'
  END as status

FROM premium_users
CROSS JOIN months;



####### Code Challenge 7

1.
Songify has added some new songs to their catalog.

Combine songs and bonus_songs using UNION and select all columns from the result.

Since the songs table is so big, just look at a sample by LIMITing the results to 10 rows.

SELECT *
FROM songs
UNION
SELECT * 
FROM bonus_songs
LIMIT 10;

####### Code Challenge 8
1.
Modify the query in test.sqlite:

Add a third UNION/SELECT so that the result contains 2017-03-01.

SELECT '2017-01-01' as month
UNION
SELECT '2017-02-01' as month
UNION
SELECT '2017-03-01' as month;

####### Code Challenge 9

The following query will give us the number of times that each song was played:

SELECT song_id,
   COUNT(*) AS 'times_played'
FROM plays
GROUP BY song_id;
Use a WITH statement to alias this code as play_count.

Join play_count with songs and select (in this order):

songs table’s title column
songs table’s artist column
play_count‘s times_played column
Remember that play_count.song_id will match songs.id.


WITH play_count AS(
  SELECT song_id, 
    COUNT(*) AS 'times_played'
  FROM plays
  GROUP BY song_id
)

SELECT songs.title,
  songs.artist,
  play_count.times_played
FROM play_count
JOIN songs
  ON play_count.song_id = songs.id; 